/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JJooqStudy;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ItemRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JItem extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_study.item</code>
     */
    public static final JItem ITEM = new JItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>jooq_study.item.item_id</code>.
     */
    public final TableField<ItemRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_study.item.item_name</code>.
     */
    public final TableField<ItemRecord, String> ITEM_NAME = createField(DSL.name("item_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jooq_study.item.item_price</code>.
     */
    public final TableField<ItemRecord, Long> ITEM_PRICE = createField(DSL.name("item_price"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_study.item.discount_price</code>.
     */
    public final TableField<ItemRecord, String> DISCOUNT_PRICE = createField(DSL.name("discount_price"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jooq_study.item.total_quantity</code>.
     */
    public final TableField<ItemRecord, Long> TOTAL_QUANTITY = createField(DSL.name("total_quantity"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_study.item.discount_date</code>.
     */
    public final TableField<ItemRecord, LocalDate> DISCOUNT_DATE = createField(DSL.name("discount_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>jooq_study.item.created_at</code>.
     */
    public final TableField<ItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>jooq_study.item.last_modified_at</code>.
     */
    public final TableField<ItemRecord, LocalDateTime> LAST_MODIFIED_AT = createField(DSL.name("last_modified_at"), SQLDataType.LOCALDATETIME(0), this, "");

    private JItem(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JItem(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooq_study.item</code> table reference
     */
    public JItem(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>jooq_study.item</code> table reference
     */
    public JItem(Name alias) {
        this(alias, ITEM);
    }

    /**
     * Create a <code>jooq_study.item</code> table reference
     */
    public JItem() {
        this(DSL.name("item"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JJooqStudy.JOOQ_STUDY;
    }

    @Override
    public Identity<ItemRecord, Long> getIdentity() {
        return (Identity<ItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_PRIMARY;
    }

    @Override
    public JItem as(String alias) {
        return new JItem(DSL.name(alias), this);
    }

    @Override
    public JItem as(Name alias) {
        return new JItem(alias, this);
    }

    @Override
    public JItem as(Table<?> alias) {
        return new JItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JItem rename(String name) {
        return new JItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItem rename(Name name) {
        return new JItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItem rename(Table<?> name) {
        return new JItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem where(Condition condition) {
        return new JItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

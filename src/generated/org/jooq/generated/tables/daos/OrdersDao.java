/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JOrders;
import org.jooq.generated.tables.pojos.Orders;
import org.jooq.generated.tables.records.OrdersRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersDao extends DAOImpl<OrdersRecord, Orders, Long> {

    /**
     * Create a new OrdersDao without any configuration
     */
    public OrdersDao() {
        super(JOrders.ORDERS, Orders.class);
    }

    /**
     * Create a new OrdersDao with an attached configuration
     */
    public OrdersDao(Configuration configuration) {
        super(JOrders.ORDERS, Orders.class, configuration);
    }

    @Override
    public Long getId(Orders object) {
        return object.getOrderId();
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JOrders.ORDERS.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<Orders> fetchByJOrderId(Long... values) {
        return fetch(JOrders.ORDERS.ORDER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    public Orders fetchOneByJOrderId(Long value) {
        return fetchOne(JOrders.ORDERS.ORDER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    public Optional<Orders> fetchOptionalByJOrderId(Long value) {
        return fetchOptional(JOrders.ORDERS.ORDER_ID, value);
    }

    /**
     * Fetch records that have <code>member_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJMemberId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JOrders.ORDERS.MEMBER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>member_id IN (values)</code>
     */
    public List<Orders> fetchByJMemberId(Long... values) {
        return fetch(JOrders.ORDERS.MEMBER_ID, values);
    }

    /**
     * Fetch records that have <code>item_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJItemId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JOrders.ORDERS.ITEM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>item_id IN (values)</code>
     */
    public List<Orders> fetchByJItemId(Long... values) {
        return fetch(JOrders.ORDERS.ITEM_ID, values);
    }

    /**
     * Fetch records that have <code>item_quantity BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJItemQuantity(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JOrders.ORDERS.ITEM_QUANTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>item_quantity IN (values)</code>
     */
    public List<Orders> fetchByJItemQuantity(Long... values) {
        return fetch(JOrders.ORDERS.ITEM_QUANTITY, values);
    }

    /**
     * Fetch records that have <code>order_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJOrderStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrders.ORDERS.ORDER_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_status IN (values)</code>
     */
    public List<Orders> fetchByJOrderStatus(String... values) {
        return fetch(JOrders.ORDERS.ORDER_STATUS, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JOrders.ORDERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<Orders> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JOrders.ORDERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>last_modified_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Orders> fetchRangeOfJLastModifiedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JOrders.ORDERS.LAST_MODIFIED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_modified_at IN (values)</code>
     */
    public List<Orders> fetchByJLastModifiedAt(LocalDateTime... values) {
        return fetch(JOrders.ORDERS.LAST_MODIFIED_AT, values);
    }
}

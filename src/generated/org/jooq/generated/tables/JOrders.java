/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JJooqStudy;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.OrdersRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOrders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_study.orders</code>
     */
    public static final JOrders ORDERS = new JOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>jooq_study.orders.order_id</code>.
     */
    public final TableField<OrdersRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_study.orders.member_id</code>.
     */
    public final TableField<OrdersRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_study.orders.item_id</code>.
     */
    public final TableField<OrdersRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_study.orders.item_quantity</code>.
     */
    public final TableField<OrdersRecord, Long> ITEM_QUANTITY = createField(DSL.name("item_quantity"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_study.orders.order_status</code>.
     */
    public final TableField<OrdersRecord, String> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jooq_study.orders.created_at</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>jooq_study.orders.last_modified_at</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> LAST_MODIFIED_AT = createField(DSL.name("last_modified_at"), SQLDataType.LOCALDATETIME(0), this, "");

    private JOrders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOrders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooq_study.orders</code> table reference
     */
    public JOrders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>jooq_study.orders</code> table reference
     */
    public JOrders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>jooq_study.orders</code> table reference
     */
    public JOrders() {
        this(DSL.name("orders"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JJooqStudy.JOOQ_STUDY;
    }

    @Override
    public Identity<OrdersRecord, Long> getIdentity() {
        return (Identity<OrdersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    @Override
    public JOrders as(String alias) {
        return new JOrders(DSL.name(alias), this);
    }

    @Override
    public JOrders as(Name alias) {
        return new JOrders(alias, this);
    }

    @Override
    public JOrders as(Table<?> alias) {
        return new JOrders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrders rename(String name) {
        return new JOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrders rename(Name name) {
        return new JOrders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrders rename(Table<?> name) {
        return new JOrders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders where(Condition condition) {
        return new JOrders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
